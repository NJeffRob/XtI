local functional <const> = "PBE0"
local basis_set <const> = "def2-SVP"
local sp_basis_set <const> = "def2-TZVPP"
local dispersion <const> = "D3BJ"
local ntasks <const> = "1"
local mem_per_cpu <const> = "1"
local charge <const> = "0"
local mult <const> = "1"

-- FHI-aims
local relativistic <const> = "atomic_zora scalar"
local relax_geometry <const> = "bfgs    5e-3"
local spin <const> = "collinear"

-- GAMESS
local scftyp <const> = "RHF"
local coord <const> = "ZMT"
local nzvar <const> = "0"
local opttol <const> = "1.0e-5"
local gbasis <const> = "DZV"
local ndfunc <const> = "0"
local guess <const> = "HUCKEL"


-- gamess requires atomic coordinates in the form atom atomic number x y z :/
local periodic_table = {"H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne", "Na", "Mg", "Al",
    "Si", "P", "S", "Cl", "Ar", "K", "Ca", "Sc", "Ti", "V", "Cr", "Mn", "Fe", "Co", "Ni", "Cu",
    "Zn", "Ga", "Ge", "As", "Se", "Br", "Kr", "Rb", "Sr", "Y", "Zr", "Nb", "Mo", "Tc", "Ru",
    "Rh", "Pd", "Ag", "Cd", "In", "Sn", "Sb", "Te", "I", "Xe", "Cs", "Ba", "La", "Ce", "Pr",
    "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W",
    "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn", "Fr", "Ra", "Ac",
    "Th", "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr", "Rf",
    "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn", "Nh", "Fl", "Mc", "Lv", "Ts", "Og"
}

-- function to extract the xyz coordinates from the .xyz file
local function xyz_extractor(io_name)
    -- this returns the path separator, which lets me copy the .xyz file based on the OS
    operating_system = package.config:sub(1,1) 
    if operating_system == "\\" then
        os.execute("copy " .. io_name .. ".xyz " .. io_name)
    elseif operating_system == "/" then
        os.execute("cp " .. io_name .. ".xyz " .. io_name)
    end

    local atomic_coordinates = {}

    -- extract coordinates
    local xyz_file = assert(io.open(io_name, "r"))

    for line in xyz_file:lines() do
        table.insert(atomic_coordinates, line)
    end

    local count = 1
    while count < 3 do
        table.remove(atomic_coordinates, 1)
        count = count + 1
    end

    -- put coordinates into the new file
    local output_coordinates = assert(io.open(io_name, "w"))

    io.input(output_coordinates)

    io.output(output_coordinates)

    for _, line in ipairs(atomic_coordinates) do
        output_coordinates:write(line)
        output_coordinates:write("\n")
    end

    output_coordinates:close()
end

-- append the xyz coordinates to the appropriate input files

-- ORCA: works!
function xyz_to_orca(io_name, calc_type, functional, basis_set, sp_basis_set, dispersion, ntasks, mem_per_cpu, charge, mult)
    xyz_extractor(io_name)

    local orca_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".inp", "w"))

    if calc_type == "sp" then
        orca_inp_file:write(
            "! " .. functional .. " ".. sp_basis_set .. " " .. dispersion .. " printbasis", "\n"
        )
    else
        orca_inp_file:write(
        "! " .. functional .. " ".. basis_set .. " " .. dispersion .. " printbasis", "\n",
        "! " .. calc_type, "\n"
        )
    end

    orca_inp_file:close()
    
    local coordinates = assert(io.open(io_name, "r"))
    local orca_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".inp", "a"))

    orca_inp_file:write(
        "", "\n",
        "%pal", "\n",
        "  nprocs " .. ntasks, "\n",
        "end", "\n",
        "", "\n",
        "%maxcore " .. mem_per_cpu*750, "\n", -- 75% of memory
        "", "\n",
        "* xyz " .. charge .. " " .. mult,
        "\n"
    )

    for line in coordinates:lines() do
        orca_inp_file:write(line .. "\n")
    end

    orca_inp_file:write("*")

    orca_inp_file:close()
    coordinates:close()

    os.remove(io_name) -- get rid of the temp coordinates

    print("ORCA input file generated successfully.")
end

-- Gaussian: works!
function xyz_to_gaussian(io_name, calc_type, functional, basis_set, sp_basis_set, dispersion, ntasks, mem_per_cpu, charge, mult)
    xyz_extractor(io_name)

    local gaussian_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".gjf", "w"))

    if calc_type == "sp" then
        gaussian_inp_file:write(
            "#P " .. functional .. "/".. sp_basis_set .. " " .. "EmpiricalDispersion=" .. dispersion, "\n"
        )
    else
        gaussian_inp_file:write(
        "#P " .. functional .. "/".. basis_set .. " " .. "EmpiricalDispersion=" .. dispersion .. " " .. calc_type, "\n"
        )
    end

    gaussian_inp_file:close()
    
    local coordinates = assert(io.open(io_name, "r"))
    local gaussian_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".gjf", "a"))

    gaussian_inp_file:write(
        "", "\n",
        "Input file generated by XtI.", "\n",
        "", "\n",
        charge .. " " .. mult,
        "\n"
    )

    for line in coordinates:lines() do
        gaussian_inp_file:write(line .. "\n")
    end

    gaussian_inp_file:write("\n")

    gaussian_inp_file:close()
    coordinates:close()

    os.remove(io_name) -- get rid of the temp coordinates

    print("Gaussian input file generated successfully.")
end

-- fhi-aims: works!
function xyz_to_fhiaims(io_name, calc_type, functional, relativistic, relax_geometry, spin)
    xyz_extractor(io_name)

    -- aims requires a geometry.in and a control.in file (names have to be this)

    -- geometry.in generation
    local fhiaims_molecule_file = assert(io.open("geometry.in", "w"))
    local coordinates = assert(io.open(io_name, "r"))

    for line in coordinates:lines() do
        local atom_sym = string.sub(line, 1, 1)

        local atom_coords = string.sub(line, 2)

        local final_input = "atom" .. atom_coords .. "    " .. atom_sym

        fhiaims_molecule_file:write(final_input .. "\n")
    end

    fhiaims_molecule_file:close()
    coordinates:close()

    os.remove(io_name)

    -- control.in generation
    local fhiaims_control_file = assert(io.open("control.in", "w"))

    fhiaims_control_file:write(
        "xc     " .. functional, "\n",
        "relativistic   " .. relativistic, "\n",
        "relax_geometry     " .. relax_geometry, "\n",
        "spin   " .. spin, "\n"
    )

    fhiaims_control_file:close()

   print("FHI-aims input files generated successfully.")
end

function xyz_to_gamess(io_name, calc_type, charge, mult)
    xyz_extractor(io_name)

    --[[
Example opt gamess input:

! H5Ir | Equilibrium Geometry | B3LYP/3-21G
 $BASIS GBASIS=N21 NGAUSS=3 $END
 $CONTRL SCFTYP=RHF RUNTYP=OPTIMIZE ICHARG=0 MULT=1 DFTTYP=B3LYP $END
 $STATPT OPTTOL=0.0001 NSTEP=20 $END

 $DATA
Title
C1
Ir   77.0   0.92687   1.75657   0.00000
H     1.0  -1.07313   1.75672  -0.00042
H     1.0   2.92687   1.75685  -0.00004
H     1.0   0.92701   3.29425  -1.27887
H     1.0   0.92648   2.10004   1.97029
H     1.0   0.92712  -0.11982  -0.69223
 $END

gamess sp example input:

! H5Ir | Single Point | B3LYP/3-21G
 $BASIS GBASIS=N21 NGAUSS=3 $END
 $CONTRL SCFTYP=RHF RUNTYP=ENERGY ICHARG=0 MULT=1 DFTTYP=B3LYP $END

 $DATA
Title
C1
Ir   77.0   0.17939   1.33798   0.00000
H     1.0  -1.82061   1.33813  -0.00042
H     1.0   2.17939   1.33826  -0.00004
H     1.0   0.17953   2.87566  -1.27887
H     1.0   0.17900   1.68145   1.97029
H     1.0   0.17964  -0.53841  -0.69223
 $END

]]

    ---[[
    local gamess_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".inp", "w"))

    if calc_type == "sp" then
        gamess_inp_file:write(
            "$BASIS GBASIS=" .. gbasis .. " $END", "\n",
            "$CONTRL SCFTYP=" .. scftyp .. " RUNTYP=ENERGY" .. " ICHARG=" .. charge .. " MULT=" .. mult .. " DFTTYP=" .. functional .. " $END"
        )
    else
        gamess_inp_file:write(
            "$BASIS GBASIS=" .. gbasis .. " $END", "\n",
            "$CONTRL SCFTYP=" .. scftyp .. "RUNTYP=" .. calc_type .. " ICHARG=" .. charge .. " MULT=" .. mult .. " DFTTYP=" .. functional .. " $END", "\n",
            "$STATPT OPTTOL=" .. opttol .. " $END"
        )
    end

    gamess_inp_file:close()
    
    local coordinates = assert(io.open(io_name, "r"))
    local gamess_inp_file = assert(io.open(io_name .. "-" .. calc_type .. ".inp", "a"))

    gamess_inp_file:write(
        "", "\n",
        "$DATA", "\n",
        "Input file generated by XtI.", "\n",
        "C1", "\n"
    )

    -- gamess requires atomic numbers; this inserts them as well as appends the coords
    for line in coordinates:lines() do
        local atom_symbol = string.sub(line, 1, 1)

        for k, v in ipairs(periodic_table) do
            if v == atom_symbol then
                local added_atom_number = string.sub(line, 4, 4)
            end
        end
        --gamess_inp_file:write(line .. "\n")
    end

    gamess_inp_file:write("\n")

    gamess_inp_file:close()
    coordinates:close()

    os.remove(io_name) -- get rid of the temp coordinates

    print("Gamess input file generated successfully.")
    --]]
end

xyz_to_gamess("water", "optimize", 0, 1)

